#ifndef _BOARD_Subject_
#define _BOARD_Subject_

#include "Block.h"
#include "HintBlock.h"
#include "Level.h"
#include "Observer.h"
#include "Subject.h"
#include "coordinate.h"
#include "Command.h"
#include <string>
#include <vector>
#include <memory>
#include <map>

struct PImplBoard{
    PImplBoard();
    //block controlled byt player
    std::shared_ptr<Block> floatingBlock_;
    //next block, must be shown on both displays
    std::shared_ptr<Block> upcomingBlock_;
    const unsigned int cols_;
    const unsigned int rows_;
    const unsigned int resRows_;

    std::vector<std::shared_ptr<Block>> boardBlocks_; 

    //2D character representation of the board as a vector of vectors
    //excludes floatingBlock_
    //' ' for open space
    //Each block type represented by its letter,'*' for star block, '?' for hint block
    //charBoard_[x][y] -> x = row number - 4, y = col number - 1
    std::vector<std::vector<char>> charBoard_;

    int score_;
    unsigned int hiScore_;
    int highestLvl_;
    //need this for game over logic, need to reset to start level
    unsigned int startlevel_;
    //need to use pointer, because it is an abstract class
    std::map<unsigned int, std::shared_ptr<Level>> levelMap_;
    std::shared_ptr<Level> level_;
};

class BoardSubject: public Subject{
    private:
        friend Level3;//need this because postMove calls isBlockPositionLegal
        friend Level4;//need this because of postMove
    	BoardSubject();
        //singleton glocal obj
        static std::shared_ptr<BoardSubject> bd_;
        std::shared_ptr<PImplBoard> board_;

        //Special Member Functions
        //prevent copying the class 
        BoardSubject(const BoardSubject&) = delete; 
        //prevent copying the class                        
        BoardSubject& operator= (const BoardSubject&) = delete; 

        //private helper
        void moveRight();
        void moveLeft();
        void moveDown();
        void clockwise();
        void counterclockwise();
        bool isBlockPositionLegal();
        bool isBlockInReservedRow();
        //update chardBoard according to boardBlocks_
        void updateCharBoardByBlocks();
        void removeFullRows();
        //get row number of full rows
        std::vector<int> getRowsToEliminate();
        std::vector<std::shared_ptr<Block>> getBlocksToEliminate();
        void removeEmptyBlocks();
        std::shared_ptr<Block> getFloatingBlockInstance();
        void updateScoreRows();
        void updateScoreBlocks();
        void updateHiScore();
        void printGameEndSummary();
    public:
        //allow gamemanager to initialize
        void initialize();
        //get global game instance
        static std::shared_ptr<BoardSubject> instance();   
        //gamemanager call these to perform operations on blocks        
        void move(Direction);
        void postMove();
        void rotate(Rotation);
        void levelAdjustment(LevelAdj);
        void drop(bool isCalledPostDropping = false);
        //print hint tips
        void getHint();
        //set level to random or norandom (and provide a file path for norandom)
        void setRandom(bool ran, std::string path = "");
        void restart(unsigned int startLvl);
        //override floating block
        void specificBlock(std::string s);
        unsigned int getNumRows() const;
        unsigned int getNumCols() const;
        unsigned int getNumResRows() const;
        char getBoardCharacter(int row, int col);
        char getFloatingBlockType();
        //check if floating block is at row, col
        bool floatingBlockIsHere(int row, int col);
        std::vector<std::shared_ptr<coordinate>> getUpcomingBlock();
        char getUpcomingBlockType();
        // board by default start at level 0, 
        // the floating block is generated by level 0, 
        // and happens before gamemanager
        // so we must changeFloatingBlock to the block od a different level
        // whenever -startlevel is set
        void changeFloatingBlockToNextBlock();
        //make floating block b and next block the previous floating block
        void fixFloatingBlock(std::shared_ptr<Block> b);
        //basic getters and setters
        int getLevelNum();
        int getScore();
        void setScore(int);
        int getHiScore();
        void setHiScore(int);
        void setSartLevel(unsigned int lvl);
        void setMaxLevel(unsigned int lvl);
};

#endif
